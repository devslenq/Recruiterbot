import re
from time import sleep

from aiogram import F
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, \
    ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

from tools.database.localdatabase import LocalDatabase
from tools.telegram.vacancy_command.state.vacancy_state import VacancyState

vacancy_router = Router()
__database__ = LocalDatabase()


async def generate_city_keyboard(prefix = "city_"):
    cities = await __database__.get_all_cities()
    print(cities)
    keyboard_builder = InlineKeyboardBuilder()
    for city in cities:
        keyboard_builder.add(InlineKeyboardButton(text=city.name, callback_data=f"{prefix}{city.name}"))
    keyboard_builder.adjust(2)
    return keyboard_builder.as_markup()


async def generate_vacancy_keyboard(vacancy_list, prefix = "vacancy_"):
    keyboard_builder = InlineKeyboardBuilder()
    for vacancy in vacancy_list:
        print(vacancy)
        keyboard_builder.add(InlineKeyboardButton(text=vacancy.name, callback_data=f"{prefix}{vacancy.id}"))

    if not keyboard_builder.buttons:
        return None
    keyboard_builder.adjust(2)
    return keyboard_builder.as_markup()


async def generate_personal_data_keyboard():
    keyboard = [
        [KeyboardButton(text="–Ø –¥–∞—é –¥–æ–∑–≤—ñ–ª –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ—ó—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


async def init_vacancy_command(message: Message):
    keyboard = await generate_city_keyboard()
    await message.answer("–û–±–µ—Ä–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ, –∞ –º–∏ –Ω–∞–¥–∞–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó!", reply_markup=keyboard)


@vacancy_router.callback_query(F.data.startswith('city_'))
async def select_city(callback_query: CallbackQuery, state: FSMContext):
    city = callback_query.data.replace("city_", "")
    print(city)
    await state.update_data({"select_city": city})
    vacancy_list = await __database__.get_vacancy_by_city(city)
    keyboard = await generate_vacancy_keyboard(vacancy_list)
    if vacancy_list:
        await callback_query.message.delete()
        await callback_query.message.answer(text="–û–±–∏—Ä–∞–π –Ω–∞–π–∫—Ä—É—Ç—ñ—à—É –≤–∞–∫–∞–Ω—Å—ñ—é üòé", reply_markup=keyboard)
    else:
        await callback_query.message.delete()
        await callback_query.message.answer(text="–£ —Ü—å–æ–º—É –º—ñ—Å—Ç—ñ –Ω–µ–º–∞—î –≤–∞–∫–∞–Ω—Å—ñ–π :(")
        from tools.telegram.main_menu_command.main_menu_command import main_menu
        await main_menu(message=callback_query.message)

    await callback_query.answer()


@vacancy_router.callback_query(F.data.startswith('vacancy_'))
async def select_vacancy(callback_query: CallbackQuery, state: FSMContext):
    vacancy = callback_query.data.replace("vacancy_", "")
    await state.update_data({"vacancy_id": vacancy})
    personal_data_keyboard = await generate_personal_data_keyboard()
    await callback_query.message.delete()
    await callback_query.message.answer(text="–ß—É–¥–æ–≤–æ!")
    sleep(1)
    await callback_query.message.answer(text="–ó–∞–ª–∏—à–∏–ª–æ—Å—å —â–µ —Ç—Ä–æ—Ö–∏...")
    sleep(1)
    await callback_query.message.answer(text="–©–æ–± –∑ —Ç–æ–±–æ—é –∑–≤'—è–∑–∞—Ç–∏—Å—å , –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ç–≤–æ—ó –¥–∞–Ω—ñ")
    sleep(1)
    await callback_query.message.answer(
        text="""–ü—Ä–æ —Ç–µ –ø–µ—Ä—à –Ω—ñ–∂ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏ —Ç–µ–±–µ , –∑–≥—ñ–¥–Ω–æ –∑–∞–∫–æ–Ω—É –£–∫—Ä–∞—ó–Ω–∏ "–ü—Ä–æ –∑–∞—Ö–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö" –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≥–æ–¥—É –Ω–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö.""",
        reply_markup=personal_data_keyboard
    )

    await callback_query.answer()


@vacancy_router.message(F.text.lower() == "—è –¥–∞—é –¥–æ–∑–≤—ñ–ª –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ—ó—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
async def process_callback_go_to_main_menu(message: Message, state: FSMContext):
    await message.delete()
    await message.answer("–ß—É–¥–æ–≤–æ! –í–∏ –¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
    sleep(1)
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ä—ñ–∫ —Å–≤–æ–≥–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è. \n–§–æ—Ä–º–∞—Ç : 2001", reply_markup=ReplyKeyboardRemove())
    await state.set_state(VacancyState.birthday)


@vacancy_router.message(VacancyState.birthday)
async def birthday(message: Message, state: FSMContext):
    user_input = message.text

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    filtered_input = user_input.replace(" ", "")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É: 4 —Ü–∏—Ñ—Ä—ã
    if re.fullmatch(r'\d{4}', filtered_input):
        # await state.clear()
        await state.update_data({"birthday": filtered_input})
        keyboard = [
            [KeyboardButton(text="–ó–∞–ª–∏—à–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
        await message.answer(text="–ê –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–≤'—è–∑–∫—É , –∑–∞–ª–∏—à —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç", reply_markup=reply_markup)
        await state.set_state(VacancyState.contact)
    else:
        await message.answer(text="–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É")


@vacancy_router.message(VacancyState.contact)
async def contacts(message: Message, state: FSMContext):
    if message.contact is None:
        keyboard = [
            [KeyboardButton(text="–ó–∞–ª–∏—à–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
        await message.answer(text ="–í–∏ –Ω–µ –¥–∞–ª–∏ –Ω–∞–º —Å–≤i–π –∫–æ–Ω—Ç–∞–∫—Ç, —Ç–æ–º—É –Ω–µ –∑–º–æ–∂–µ–º–æ –∑–≤'—è–∑–∞—Ç–∏—Å—è.\n–ù–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –Ω—É –±—É–¥—å –ª–∞—Å–∫–∞ :)", reply_markup=reply_markup )
        return
    user_data = await state.get_data()
    print(user_data)
    birthday = user_data.get("birthday")
    select_city = user_data.get("select_city")
    vacancy = user_data.get("vacancy_id")
    vacancy_name = await __database__.get_vacancy_by_id(vacancy)
    await state.clear()
    await message.answer(f"–î—è–∫—É—î–º–æ —Ç–æ–±—ñ!\n–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ —Ç–æ–±–æ—é —É –Ω–∞–π–±–ª–∏–∂—á–∏–π —á–∞—Å",
                         reply_markup=ReplyKeyboardRemove())
    from tools.telegram.admin_command.admin_command import admin_list
    for list in admin_list:
        from tools.telegram.telegramhelper import bot
        await bot.send_message(chat_id=list,
                               text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}\n–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancy_name}\n–í –≥–æ—Ä–æ–¥–µ {select_city}\n–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è {birthday}\n–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {message.contact.phone_number}")
